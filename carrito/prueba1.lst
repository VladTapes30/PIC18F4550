CCS PCH C Compiler, Version 5.025, 12859               09-abr.-24 21:16

               Filename:   C:\Users\achem\OneDrive\Documentos\GitHub\PIC18F4550\carrito\prueba1.lst

               ROM used:   116 bytes (0%)
                           Largest free fragment is 32652
               RAM used:   5 (0%) at main() level
                           5 (0%) worst case
               Stack used: 0 locations
               Stack size: 31

*
0000:  GOTO   0004
.................... #include <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #fuses HSPLL,PLL5,USBDIV,VREGEN,CPUDIV1,PUT,MCLR,WRTB,NOWDT,NOPROTECT,NOPBADEN 
.................... #use delay(clock=48000000) 
.................... #use rs232(baud=9600,xmit=PIN_C6,rcv=PIN_C7) 
....................  
.................... #define LED1 PIN_B0 
.................... #define LED2 PIN_B1 
.................... #define LED3 PIN_B2 
.................... #define LED4 PIN_B3 
....................  
.................... #byte portb = 0x0F81 
.................... //#locate dato=0x0005 
....................  
.................... void main(void) 
0004:  CLRF   FF8
0006:  BCF    FD0.7
0008:  BSF    FB8.3
000A:  MOVLW  E1
000C:  MOVWF  FAF
000E:  MOVLW  04
0010:  MOVWF  FB0
0012:  MOVLW  A6
0014:  MOVWF  FAC
0016:  MOVLW  90
0018:  MOVWF  FAB
001A:  MOVF   FC1,W
001C:  ANDLW  C0
001E:  IORLW  0F
0020:  MOVWF  FC1
0022:  MOVLW  07
0024:  MOVWF  FB4
0026:  CLRF   05
.................... { 
....................    char Bdato = 0X00; 
....................    set_tris_b(0x00); 
0028:  MOVLW  00
002A:  MOVWF  F93
....................     
....................    while(TRUE) 
....................    { 
....................      Bdato = getc();//TOMAR LOS DATOS QUE SE ENCUENTRAN EN MI BLUETOOTH 
002C:  BTFSS  F9E.5
002E:  BRA    002C
0030:  MOVFF  FAE,05
....................       
....................      switch (Bdato) 
0034:  MOVF   05,W
0036:  XORLW  78
0038:  BZ    0048
003A:  XORLW  02
003C:  BZ    004E
003E:  XORLW  03
0040:  BZ    0054
0042:  XORLW  0E
0044:  BZ    005A
0046:  BRA    0060
....................      { 
....................          case 'x': 
....................              output_high(LED1); //PRENDER LED 
0048:  BCF    F93.0
004A:  BSF    F8A.0
....................              break; 
004C:  BRA    0070
....................          case 'z': 
....................              output_high(LED2); //PRENDER LED 
004E:  BCF    F93.1
0050:  BSF    F8A.1
....................              break; 
0052:  BRA    0070
....................          case 'y': 
....................              output_high(LED3); //PRENDER LED 
0054:  BCF    F93.2
0056:  BSF    F8A.2
....................              break; 
0058:  BRA    0070
....................          case 'w': 
....................              output_high(LED4); //PRENDER LED 
005A:  BCF    F93.3
005C:  BSF    F8A.3
....................              break; 
005E:  BRA    0070
....................               
....................              default : 
....................              output_low(LED1); 
0060:  BCF    F93.0
0062:  BCF    F8A.0
....................              output_low(LED2); 
0064:  BCF    F93.1
0066:  BCF    F8A.1
....................              output_low(LED3); 
0068:  BCF    F93.2
006A:  BCF    F8A.2
....................              output_low(LED4); 
006C:  BCF    F93.3
006E:  BCF    F8A.3
....................      } 
0070:  BRA    002C
....................       
....................    } 
.................... } 
....................  
0072:  SLEEP 

Configuration Fuses:
   Word  1: CE24   PLL5 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8500   CCP2C1 NOPBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
